name: Deploy to Dev

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push nginx image
      uses: docker/build-push-action@v5
      with:
        context: ./nginx
        file: ./nginx/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload MySQL init script
      uses: actions/upload-artifact@v4
      with:
        name: mysql-init-script
        path: mysql/init.sql
        retention-days: 30

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download MySQL init script
      uses: actions/download-artifact@v4
      with:
        name: mysql-init-script
        path: mysql/

    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to server
      run: |
        echo "Deployment would happen here"
        echo "Images built and pushed successfully:"
        echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
        echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
        echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:latest"
        echo "MySQL init script available for deployment"
        
        # SSH部署到EC2示例
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
        # 拉取最新镜像
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:latest
        docker pull mysql:8.0
        
        # 上传MySQL初始化脚本到服务器
        scp -o StrictHostKeyChecking=no mysql/init.sql ${{ secrets.EC2_USER }}@${{ secrets.EC2_INSTANCE_IP }}:/tmp/init.sql
        
        # 停止并删除当前运行的容器
        RUNNING_CONTAINERS=$(docker ps -q)
        if [ ! -z "$RUNNING_CONTAINERS" ]; then
          docker stop $RUNNING_CONTAINERS
          docker rm $RUNNING_CONTAINERS
        fi
        
        # 确保MySQL初始化脚本在正确位置
        mkdir -p mysql
        mv /tmp/init.sql mysql/init.sql
        
        # 使用docker-compose启动服务
        docker-compose up -d
        EOF
